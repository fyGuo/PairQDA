
R version 4.2.2 (2022-10-31) -- "Innocent and Trusting"
Copyright (C) 2022 The R Foundation for Statistical Computing
Platform: aarch64-apple-darwin20 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> pkgname <- "PairQDA"
> source(file.path(R.home("share"), "R", "examples-header.R"))
> options(warn = 1)
> library('PairQDA')
> 
> base::assign(".oldSearch", base::search(), pos = 'CheckExEnv')
> base::assign(".old_wd", base::getwd(), pos = 'CheckExEnv')
> cleanEx()
> nameEx("asym_cond_qda_fit")
> ### * asym_cond_qda_fit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: asym_cond_qda_fit
> ### Title: Asymmetric Conditional QDA (fitting the model)
> ### Aliases: asym_cond_qda_fit
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(mvtnorm)
> data(HearingLoss_simu)
> fit <- asym_cond_qda_fit(HearingLoss_simu,
+                   id = "id")
> test_data_X <- HearingLoss_simu[1,] %>% dplyr::select(-"Label_1", -"Label_2",-"id")
> asym_cond_qda_predict(fit, test_data_X)
[1] "1_1"
> 
> 
> 
> cleanEx()

detaching ‘package:mvtnorm’, ‘package:dplyr’

> nameEx("asym_cond_qda_predict")
> ### * asym_cond_qda_predict
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: asym_cond_qda_predict
> ### Title: Asymmetric Conditional QDA (predicting new phenotypes)
> ### Aliases: asym_cond_qda_predict
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(mvtnorm)
> data(HearingLoss_simu)
> fit <- asym_cond_qda_fit(HearingLoss_simu,
+                   id = "id")
> test_data_X <- HearingLoss_simu[1,] %>% dplyr::select(-"Label_1", -"Label_2",-"id")
> asym_cond_qda_predict(fit, test_data_X)
[1] "1_1"
> 
> 
> 
> cleanEx()

detaching ‘package:mvtnorm’, ‘package:dplyr’

> nameEx("asym_marg_qda_fit")
> ### * asym_marg_qda_fit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: asym_marg_qda_fit
> ### Title: Asymmetric Marginal QDA (fitting model)
> ### Aliases: asym_marg_qda_fit
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(mvtnorm)
> data(HearingLoss_simu)
> fit <- asym_marg_qda_fit(HearingLoss_simu,
+                   id = "id")
> test_data_X <- HearingLoss_simu[1,] %>% dplyr::select(-"Label_1", -"Label_2",-"id")
> asym_marg_qda_predict(fit, test_data_X)
[1] "1_1"
> 
> 
> 
> cleanEx()

detaching ‘package:mvtnorm’, ‘package:dplyr’

> nameEx("asym_marg_qda_predict")
> ### * asym_marg_qda_predict
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: asym_marg_qda_predict
> ### Title: Asymmetric Marginal QDA (predicting new phenotypes)
> ### Aliases: asym_marg_qda_predict
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(mvtnorm)
> data(HearingLoss_simu)
> fit <- asym_marg_qda_fit(HearingLoss_simu,
+                   id = "id")
> test_data_X <- HearingLoss_simu[1,] %>% dplyr::select(-"Label_1", -"Label_2",-"id")
> asym_marg_qda_predict(fit, test_data_X)
[1] "1_1"
> 
> 
> 
> cleanEx()

detaching ‘package:mvtnorm’, ‘package:dplyr’

> nameEx("conv_qda_fit")
> ### * conv_qda_fit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: conv_qda_fit
> ### Title: Conventional QDA (fitting model)
> ### Aliases: conv_qda_fit
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(mvtnorm)
> data(HearingLoss_simu)
> fit <- conv_qda_fit(HearingLoss_simu,
+                   id = "id")
> test_data_X <- HearingLoss_simu[1,] %>% dplyr::select(-"Label_1", -"Label_2",-"id")
> conv_qda_predict(fit, test_data_X)
[1] "1_1"
> 
> 
> 
> cleanEx()

detaching ‘package:mvtnorm’, ‘package:dplyr’

> nameEx("conv_qda_predict")
> ### * conv_qda_predict
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: conv_qda_predict
> ### Title: Conventional QDA (predicting new phenotypes)
> ### Aliases: conv_qda_predict
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(mvtnorm)
> data(HearingLoss_simu)
> fit <- conv_qda_fit(HearingLoss_simu,
+                   id = "id")
> test_data_X <- HearingLoss_simu[1,] %>% dplyr::select(-"Label_1", -"Label_2",-"id")
> conv_qda_predict(fit, test_data_X)
[1] "1_1"
> 
> 
> 
> cleanEx()

detaching ‘package:mvtnorm’, ‘package:dplyr’

> nameEx("sym_bayes_qda_fit")
> ### * sym_bayes_qda_fit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sym_bayes_qda_fit
> ### Title: Symmetric Bayesian QDA (fitting model)
> ### Aliases: sym_bayes_qda_fit
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(mvtnorm)
> library(MASS)

Attaching package: ‘MASS’

The following object is masked from ‘package:dplyr’:

    select

> data(HearingLoss_simu)
> fit <- sym_bayes_qda_fit(HearingLoss_simu,
+                   id = "id")
> test_data_X <- HearingLoss_simu[1,] %>% dplyr::select(-"Label_1", -"Label_2",-"id")
> sym_bayes_qda_predict(fit, test_data_X)
[1] "1_1"
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’, ‘package:mvtnorm’, ‘package:dplyr’

> nameEx("sym_bayes_qda_predict")
> ### * sym_bayes_qda_predict
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sym_bayes_qda_predict
> ### Title: Symmetric Bayesian QDA (predicting new phenotypes)
> ### Aliases: sym_bayes_qda_predict
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(mvtnorm)
> library(MASS)

Attaching package: ‘MASS’

The following object is masked from ‘package:dplyr’:

    select

> data(HearingLoss_simu)
> fit <- sym_bayes_qda_fit(HearingLoss_simu,
+                   id = "id")
> test_data_X <- HearingLoss_simu[1,] %>% dplyr::select(-"Label_1", -"Label_2",-"id")
> sym_bayes_qda_predict(fit, test_data_X)
[1] "1_1"
> 
> 
> 
> cleanEx()

detaching ‘package:MASS’, ‘package:mvtnorm’, ‘package:dplyr’

> nameEx("sym_joint_qda_fit")
> ### * sym_joint_qda_fit
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sym_joint_qda_fit
> ### Title: Symmetric Joint QDA (fitting model)
> ### Aliases: sym_joint_qda_fit
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> data(HearingLoss_simu)
> fit <- sym_joint_qda_fit(HearingLoss_simu,
+                   id = "id")
> 
> 
> 
> cleanEx()

detaching ‘package:dplyr’

> nameEx("sym_joint_qda_predict")
> ### * sym_joint_qda_predict
> 
> flush(stderr()); flush(stdout())
> 
> ### Name: sym_joint_qda_predict
> ### Title: Symmetric Joint QDA (predicting new phenotypes)
> ### Aliases: sym_joint_qda_predict
> 
> ### ** Examples
> 
> library(dplyr)

Attaching package: ‘dplyr’

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(mvtnorm)
> data(HearingLoss_simu)
> fit <- sym_joint_qda_fit(HearingLoss_simu,
+                   id = "id")
> test_data_X <- HearingLoss_simu[1,] %>% dplyr::select(-"Label_1", -"Label_2",-"id")
> sym_joint_qda_predict(fit, test_data_X)
[1] "1_1"
> 
> 
> 
> ### * <FOOTER>
> ###
> cleanEx()

detaching ‘package:mvtnorm’, ‘package:dplyr’

> options(digits = 7L)
> base::cat("Time elapsed: ", proc.time() - base::get("ptime", pos = 'CheckExEnv'),"\n")
Time elapsed:  0.805 0.039 0.856 0 0 
> grDevices::dev.off()
null device 
          1 
> ###
> ### Local variables: ***
> ### mode: outline-minor ***
> ### outline-regexp: "\\(> \\)?### [*]+" ***
> ### End: ***
> quit('no')
